import { feedPlugin } from "@11ty/eleventy-plugin-rss";
import { EleventyHtmlBasePlugin } from "@11ty/eleventy";
import { eleventyImageTransformPlugin } from "@11ty/eleventy-img";
import path from "node:path";
import fs from "fs";
import postcss from "postcss";
import postcssImport from "postcss-import";
import autoprefixer from "autoprefixer";
import cssnano from "cssnano";
import embedEverything from "eleventy-plugin-embed-everything";

const config = JSON.parse(fs.readFileSync("src/_data/config.json", "utf8"));

export default function (eleventyConfig) {
  eleventyConfig.addPassthroughCopy("src/assets/");
  eleventyConfig.addPassthroughCopy("src/robots.txt");

  eleventyConfig.addPlugin(EleventyHtmlBasePlugin);
  eleventyConfig.addPlugin(embedEverything, {
    use: ["youtube", "instagram"],
    youtube: {
      options: {
        lite: {
          css: {
            inline: true,
          },
          js: {
            inline: true,
          },
          thumbnailFormat: "webp",
          thumbnailQuality: "hqdefault",
          responsive: false,
        },
      },
    },
  });
  eleventyConfig.addBundle("css", {
    outputFileExtension: "css",
    toFileDirectory: "assets/styles",
    transforms: [
      async function (content) {
        let result = await postcss([
          postcssImport,
          autoprefixer,
          cssnano({ preset: "default" }),
        ]).process(content, { from: undefined });
        return result.css;
      },
    ],
  });
  eleventyConfig.addFilter("read", function (filepath) {
    return fs.readFileSync(`src${filepath}`, "utf8");
  });
  eleventyConfig.addPlugin(eleventyImageTransformPlugin, {
    formats: ["webp"],
    widths: [300, 450, 600],

    filenameFormat(id, src, width, format) {
      src = src.replace(/\\/g, "/");
      const extension = path.extname(src);
      const name = path.basename(src, extension);
      return `${name}-${width}w.${format}`;
    },

    sharpOptions: {
      webp: {
        quality: 75, // compactação equilibrada: 50-80 é ideal para web
        effort: 6, // 1-6, 6 = máxima compressão sem alterar qualidade perceptível
      },
    },

    htmlOptions: {
      pictureAttributes: {},
      imgAttributes: {
        loading: "lazy",
        decoding: "async",
        sizes: "(max-width: 768px) 100vw, 50vw",
        style: "max-width:100%; height:auto; display:block;",
      },
      includeAutoGeneratedWidthHeight: true,
    },
  });
  eleventyConfig.addPlugin(feedPlugin, {
    type: "atom",
    outputPath: "/feed.xml",
    collection: {
      name: "posts",
      limit: 100,
    },
    stylesheet: "assets/styles/rss.xsl",
    metadata: {
      language: config.siteLang,
      title: config.siteName,
      subtitle: config.siteDescription,
      base: config.siteURL,
      author: {
        name: config.siteAuthor,
        email: config.authorContact,
      },
    },
  });

  eleventyConfig.addGlobalData("layout", "layout.html");

  eleventyConfig.addGlobalData("lastUpdate", () => {
    let now = new Date().toUTCString();
    const day = now.slice(5, 7);
    const month = now.slice(8, 11);
    const year = now.slice(12, 16);
    const DMY = `${day} ${month} ${year}`;
    const MDY = `${month} ${day}, ${year}`;
    const YMD = `${year} ${month} ${day}`;
    return MDY;
  });

  eleventyConfig.addFilter("dateFormat", function (value) {
    const temp = value.toISOString();
    const day = temp.slice(8, 10);
    const month = temp.slice(5, 7);
    const year = temp.slice(0, 4);
    const DMY = `${day}/${month}/${year}`;
    const MDY = `${month}/${day}/${year}`;
    const YMD = `${year}/${month}/${day}`;
    const YDM = `${year}/${day}/${month}`;
    return DMY;
  });

  eleventyConfig.addFilter("getLatestTwo", function (value) {
    const converted = value.slice(0, 2);
    return converted;
  });

  eleventyConfig.addFilter("filterTags", function (value) {
    let newTags = [];
    let anyTags = false;
    for (let i in value) {
      if (i != "posts" && i != "header" && i != "all") {
        newTags.push(i);
        anyTags = true;
      }
    }
    if (anyTags) {
      return newTags.sort();
    } else {
      return false;
    }
  });

  eleventyConfig.addFilter("cleanPages", function (value) {
    const clean = [];
    for (let i = 0; i < value.length; i++) {
      value[i].data.title && clean.push(value[i]);
    }
    return clean;
  });

  eleventyConfig.addFilter("forceReverse", function (value) {
    return value.toReversed();
  });

  eleventyConfig.addFilter("debug", function (value) {
    console.log(value);
    return value;
  });

  return {
    dir: {
      input: "src",
      includes: "_includes",
      data: "_data",
      output: "_site",
    },
    pathPrefix: config.siteSubDir,
  };
}
